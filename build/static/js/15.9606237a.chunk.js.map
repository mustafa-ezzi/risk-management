{"version":3,"sources":["components/CreateBatchModal.js","components/EditBatchModal.js","pages/Batch.js","api/axios.js","components/Typography/PageTitle.js"],"names":["AssignRequestsModal","_ref","isOpen","onClose","onBatchCreated","name","setName","useState","requests","setRequests","selectedIds","setSelectedIds","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","async","res","get","Array","isArray","results","e","console","error","fetchRequests","React","createElement","className","ModalHeader","onClick","Label","Input","value","onChange","target","placeholder","required","type","checked","length","map","r","id","req","_req$toggle","key","includes","handleCheckbox","prev","filter","x","city_name","zone_name","concat","toggle","toUpperCase","pass_date","submit","validate","errs","trim","Object","keys","post","request_ids","toast","success","disabled","EditBatchModal","onBatchUpdated","batchData","unbatched","assigned","combined","some","a","Button","patch","Batch","useHistory","setBatchData","isLoading","setIsLoading","setError","isCreateModalOpen","setIsCreateModalOpen","isEditModalOpen","setIsEditModalOpen","currentBatch","setCurrentBatch","refreshTrigger","setRefreshTrigger","selectedBatch","setSelectedBatch","isDetailsModalOpen","setIsDetailsModalOpen","BatchActionButtons","batchId","Fragment","stopPropagation","handleUpdateBatchStatus","title","AiOutlineDelete","response","err","fetchBatchData","status","confirmMsg","window","confirm","_delete","batch","PageTitle","TableContainer","style","opacity","Table","TableHeader","TableCell","TableBody","item","index","TableRow","layout","size","aria-label","aria-hidden","full_name","CreateBatchModal","handleCreateModalClose","handleBatchCreated","handleEditModalClose","handleBatchUpdated","BASE_URL","log","axiosInstance","axios","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Promise","reject","clear","location","href","url","params","then","data","put","delete","downloadBlob","filename","responseType","blob","Blob","blobUrl","URL","createObjectURL","link","document","setAttribute","body","appendChild","click","remove","revokeObjectURL","uploadFormData","formData","children"],"mappings":"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","file":"static/js/15.9606237a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { post, get } from \"../api/axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Textarea\r\n} from '@windmill/react-ui';\r\nfunction AssignRequestsModal({ isOpen, onClose, onBatchCreated }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [requests, setRequests] = useState([]);\r\n  const [selectedIds, setSelectedIds] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchRequests = async () => {\r\n      try {\r\n        const res = await get(\"requests/filter-requests\");\r\n        setRequests(Array.isArray(res.results) ? res.results : []);\r\n      } catch (e) {\r\n        console.error(\"Error fetching requests:\", e);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      fetchRequests();\r\n      setName(\"\");\r\n      setSelectedIds([]);\r\n      setErrors({});\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleCheckbox = (id) => {\r\n    setSelectedIds(prev =>\r\n      prev.includes(id)\r\n        ? prev.filter(x => x !== id)\r\n        : [...prev, id]\r\n    );\r\n  };\r\n\r\n  const validate = () => {\r\n    const errs = {};\r\n    if (!name.trim()) errs.name = \"Name is required\";\r\n    if (selectedIds.length === 0) errs.requests = \"At least one request must be selected\";\r\n    setErrors(errs);\r\n    return Object.keys(errs).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validate()) return;\r\n    try {\r\n      setIsSubmitting(true);\r\n      await post(\"requests/batch/\", { name, request_ids: selectedIds });\r\n      toast.success(\"Assigned successfully\");\r\n      if (typeof onBatchCreated === 'function') {\r\n        onBatchCreated();\r\n      }\r\n      onClose();\r\n    } catch (e) {\r\n      console.error(\"Submit error:\", e);\r\n      setErrors({ submit: \"Failed to assign. Please try again.\" });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md mx-4\">\r\n        <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n          <ModalHeader>Create New Batch</ModalHeader>\r\n          <button onClick={onClose}>✖️</button>\r\n        </div>\r\n\r\n        <div className=\"p-6\">\r\n\r\n          <Label className=\"block mb-4\">\r\n            <span>Batch Name</span>\r\n            <Input\r\n              className=\"mt-1\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={e => setName(e.target.value)}\r\n              placeholder=\"Enter  name\"\r\n              required\r\n            />\r\n          </Label>\r\n\r\n          <div className=\"mb-4 overflow-x-auto border rounded-md\">\r\n            <label className=\"block text-sm font-medium mb-2 dark:text-white\">Select Requests *</label>\r\n            <table className=\"min-w-full text-sm text-left table-auto\">\r\n              <thead className=\"bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200\">\r\n                <tr>\r\n                  <th className=\"px-3 py-2\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedIds.length > 0 && selectedIds.length === requests.length}\r\n                      onChange={(e) =>\r\n                        setSelectedIds(e.target.checked ? requests.map(r => r.id) : [])\r\n                      }\r\n                    />\r\n                  </th>\r\n                  <th className=\"px-3 py-2\">ID</th>\r\n                  <th className=\"px-3 py-2\">Type</th>\r\n                  <th className=\"px-3 py-2\">Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"divide-y divide-gray-200 dark:divide-gray-600\">\r\n                {requests.map((req) => (\r\n                  <tr key={req.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-white\">\r\n                    <td className=\"px-3 py-2\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedIds.includes(req.id)}\r\n                        onChange={() => handleCheckbox(req.id)}\r\n                       />\r\n                    </td>\r\n                    <td className=\"px-3 py-2\">{req.id}</td>\r\n                    <td className=\"px-3 py-2\">{req.type || '—'}</td>\r\n                    <td className=\"px-3 py-2\">{req.type === 'change_city_request' && req.city_name}\r\n                      {req.type === 'change_zone_request' && req.zone_name}\r\n                      {req.type === 'pass_request' &&\r\n                        `${req.toggle?.toUpperCase()} - ${req.pass_date}`}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n            {errors.requests && (\r\n              <p className=\"text-xs text-red-600 mt-2\">{errors.requests}</p>\r\n            )}\r\n          </div>\r\n\r\n\r\n          {errors.submit && <p className=\"text-sm text-red-600\">{errors.submit}</p>}\r\n        </div>\r\n\r\n        <div className=\"px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex justify-end\">\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={isSubmitting}\r\n            className={`px-4 py-2 bg-indigo-600 text-white rounded ${isSubmitting ? \"opacity-50\" : \"\"}`}\r\n          >\r\n            {isSubmitting ? \"Submitting...\" : \"Assign\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssignRequestsModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { patch, get } from \"../api/axios\";\r\nimport toast from \"react-hot-toast\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Input,\r\n  Label,\r\n} from \"@windmill/react-ui\";\r\n\r\nfunction EditBatchModal({ isOpen, onClose, onBatchUpdated, batchData }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [requests, setRequests] = useState([]);\r\n  const [selectedIds, setSelectedIds] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n  const fetchRequests = async () => {\r\n    try {\r\n      const res = await get(\"requests/requests\");\r\n      const unbatched = Array.isArray(res.results) ? res.results : [];\r\n\r\n      // Combine current batch's requests with unbatched\r\n      const assigned = batchData?.requests || [];\r\n      const combined = [...assigned, ...unbatched.filter(r => !assigned.some(a => a.id === r.id))];\r\n\r\n      setRequests(combined);\r\n    } catch (e) {\r\n      console.error(\"Error fetching requests:\", e);\r\n    }\r\n  };\r\n\r\n  if (isOpen) {\r\n    fetchRequests();\r\n    setName(batchData?.name || \"\");\r\n    setSelectedIds(batchData?.request_ids || []);\r\n    setErrors({});\r\n  }\r\n}, [isOpen, batchData]);\r\n\r\n\r\n  const handleCheckbox = (id) => {\r\n    setSelectedIds((prev) =>\r\n      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n  const validate = () => {\r\n    const errs = {};\r\n    if (!name.trim()) errs.name = \"Name is required\";\r\n    if (selectedIds.length === 0) errs.requests = \"Select at least one request\";\r\n    setErrors(errs);\r\n    return Object.keys(errs).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validate()) return;\r\n    try {\r\n      setIsSubmitting(true);\r\n      await patch(`requests/batch/${batchData.id}/edit/`, {\r\n        name,\r\n        request_ids: selectedIds,\r\n      });\r\n      toast.success(\"Batch updated successfully\");\r\n\r\n      if (typeof onBatchUpdated === \"function\") {\r\n        onBatchUpdated();\r\n      }\r\n\r\n      onClose();\r\n    } catch (e) {\r\n      console.error(\"Submit error:\", e);\r\n      setErrors({ submit: \"Failed to update batch. Please try again.\" });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md mx-4\">\r\n        <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n          <ModalHeader>Edit Batch</ModalHeader>\r\n          <button onClick={onClose}>✖️</button>\r\n        </div>\r\n\r\n        <div className=\"p-6\">\r\n          <Label className=\"block mb-4\">\r\n            <span>Batch Name *</span>\r\n            <Input\r\n              className=\"mt-1\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              placeholder=\"Enter batch name\"\r\n            />\r\n            {errors.name && (\r\n              <p className=\"text-xs text-red-600 mt-1\">{errors.name}</p>\r\n            )}\r\n          </Label>\r\n\r\n          <div className=\"mb-4 overflow-x-auto border rounded-md\">\r\n            <label className=\"block text-sm font-medium mb-2 dark:text-white\">Select Requests *</label>\r\n            <table className=\"min-w-full text-sm text-left table-auto\">\r\n              <thead className=\"bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200\">\r\n                <tr>\r\n                  <th className=\"px-3 py-2\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={selectedIds.length > 0 && selectedIds.length === requests.length}\r\n                      onChange={(e) =>\r\n                        setSelectedIds(e.target.checked ? requests.map(r => r.id) : [])\r\n                      }\r\n                    />\r\n                  </th>\r\n                  <th className=\"px-3 py-2\">ID</th>\r\n                  <th className=\"px-3 py-2\">Type</th>\r\n                  <th className=\"px-3 py-2\">Status</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"divide-y divide-gray-200 dark:divide-gray-600\">\r\n                {requests.map((req) => (\r\n                  <tr key={req.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-white\">\r\n                    <td className=\"px-3 py-2\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={selectedIds.includes(req.id)}\r\n                        onChange={() => handleCheckbox(req.id)}\r\n                      />\r\n                    </td>\r\n                    <td className=\"px-3 py-2\">{req.id}</td>\r\n                    <td className=\"px-3 py-2\">{req.type || '—'}</td>\r\n                    <td className=\"px-3 py-2\">{req.type === 'change_city_request' && req.city_name}\r\n                      {req.type === 'change_zone_request' && req.zone_name}\r\n                      {req.type === 'pass_request' &&\r\n                        `${req.toggle?.toUpperCase()} - ${req.pass_date}`}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n            {errors.requests && (\r\n              <p className=\"text-xs text-red-600 mt-2\">{errors.requests}</p>\r\n            )}\r\n          </div>\r\n\r\n          {errors.submit && (\r\n            <p className=\"text-sm text-red-600 mt-2\">{errors.submit}</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex justify-end\">\r\n          <Button\r\n            onClick={handleSubmit}\r\n            disabled={isSubmitting}\r\n            className={isSubmitting ? \"opacity-50 cursor-not-allowed\" : \"\"}\r\n          >\r\n            {isSubmitting ? \"Updating...\" : \"Update Batch\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditBatchModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { get, _delete } from \"../api/axios\";\r\nimport PageTitle from \"../components/Typography/PageTitle\";\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableBody,\r\n  TableRow,\r\n  TableContainer,\r\n  Button,\r\n} from \"@windmill/react-ui\";\r\nimport {\r\n  AiOutlineDelete,\r\n} from \"react-icons/ai\";\r\nimport CreateBatchModal from \"../components/CreateBatchModal\";\r\nimport EditBatchModal from \"../components/EditBatchModal\";\r\nimport toast from \"react-hot-toast\";\r\nimport logoLight from '../assets/img/mainLogo.png';\r\nimport logoDark from '../assets/img/mainLogo-dark.png';\r\nfunction Batch() {\r\n  const history = useHistory();\r\n\r\n  const [batchData, setBatchData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n  const [currentBatch, setCurrentBatch] = useState(null);\r\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\r\n  const [selectedBatch, setSelectedBatch] = useState(null);\r\n  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n  const BatchActionButtons = ({ batchId }) => (\r\n    <>\r\n      <button\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          handleUpdateBatchStatus(batchId, 'todo');\r\n        }}\r\n        className=\"text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/30 p-1 rounded\"\r\n        title=\"Delete (TODO)\"\r\n      >\r\n        <AiOutlineDelete className=\"h-5 w-5\" />\r\n      </button>\r\n\r\n      <button\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          handleUpdateBatchStatus(batchId, 'completed');\r\n        }}\r\n        className=\"text-green-600 dark:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/30 p-1 rounded\"\r\n        title=\"Mark Completed\"\r\n      >\r\n        ✅\r\n      </button>\r\n\r\n      <button\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          handleUpdateBatchStatus(batchId, 'duplicate');\r\n        }}\r\n        className=\"text-yellow-600 dark:text-yellow-400 hover:bg-yellow-50 dark:hover:bg-yellow-900/30 p-1 rounded\"\r\n        title=\"Mark Duplicate\"\r\n      >\r\n        📄\r\n      </button>\r\n    </>\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchBatchData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await get(\"/requests/batch/\");\r\n        setBatchData(response.results);\r\n      } catch (err) {\r\n        console.error(\"Error fetching batch data:\", err);\r\n        setError(\"Failed to load batch data\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBatchData();\r\n  }, [refreshTrigger]);\r\n\r\n  const handleAddBatch = () => {\r\n    setIsCreateModalOpen(true);\r\n  };\r\n\r\n  const handleCreateModalClose = () => {\r\n    setIsCreateModalOpen(false);\r\n  };\r\n\r\n  const handleBatchDetails = (batch) => {\r\n    setSelectedBatch(batch);\r\n    setIsDetailsModalOpen(true);\r\n  };\r\n\r\n  const handleDetailsModalClose = () => {\r\n    setSelectedBatch(null);\r\n    setIsDetailsModalOpen(false);\r\n  };\r\n\r\n  const handleEditClick = (batch) => {\r\n    setCurrentBatch(batch);\r\n    setIsEditModalOpen(true);\r\n  };\r\n\r\n  const handleEditModalClose = () => {\r\n    setIsEditModalOpen(false);\r\n    setCurrentBatch(null);\r\n  };\r\n\r\n  const handleBatchCreated = () => {\r\n    setRefreshTrigger((prev) => prev + 1);\r\n  };\r\n\r\n  const handleBatchUpdated = () => {\r\n    setRefreshTrigger((prev) => prev + 1);\r\n    toast.success(\"Batch updated successfully\");\r\n  };\r\n\r\n  const handleUpdateBatchStatus = async (id, status) => {\r\n    try {\r\n      const confirmMsg =\r\n        status === 'todo'\r\n          ? 'Are you sure you want to delete this batch and reset requests to TODO?'\r\n          : `Are you sure you want to mark this batch as \"${status}\" and keep it?`;\r\n\r\n      const confirmed = window.confirm(confirmMsg);\r\n      if (!confirmed) return;\r\n\r\n      await _delete(`requests/batches/${id}/delete/?status=${status}`);\r\n\r\n      setBatchData((prev) => {\r\n        if (status === 'todo') {\r\n          // Remove batch from UI if deleted\r\n          return prev.filter((batch) => batch.id !== id);\r\n        }\r\n        // Otherwise just update the UI or leave as-is\r\n        return prev;\r\n      });\r\n\r\n      toast.success(\r\n        status === 'todo'\r\n          ? 'Batch deleted and requests set to TODO'\r\n          : `Batch marked as \"${status}\" successfully`\r\n      );\r\n    } catch (err) {\r\n      console.error('Batch update failed:', err);\r\n      toast.error('Failed to update batch. Please try again.');\r\n    }\r\n  };\r\n\r\n\r\n  const getInitials = (name) => {\r\n    return name\r\n      .split(\" \")\r\n      .map((n) => n[0])\r\n      .join(\"\")\r\n      .toUpperCase()\r\n      .substring(0, 2);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative w-full px-4 py-6\">\r\n      {/* Content Overlay */}\r\n      <div className=\"relative z-10\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <PageTitle>Batchs </PageTitle>\r\n        </div>\r\n        {/* Loading State */}\r\n        {isLoading ? (\r\n          <div className=\"flex justify-center my-8\">\r\n            <p className=\"text-gray-700 dark:text-gray-300\">Loading data...</p>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"text-center py-8\">\r\n            <p className=\"text-red-600 dark:text-red-400\">{error}</p>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {/* Desktop Table - Hidden on mobile */}\r\n            <TableContainer className=\"hidden md:block mb-8\" style={{opacity: 0.97,}}>\r\n              <Table>\r\n                <TableHeader>\r\n                  <tr>\r\n                    <TableCell>S.No</TableCell>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Request IDs</TableCell>\r\n                    <TableCell>Actions</TableCell>\r\n                  </tr>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {batchData.map((item, index) => (\r\n                    <TableRow key={item.id}>\r\n                      <TableCell>\r\n                        <span className=\"text-sm font-semibold\">\r\n                          {index + 1}\r\n                        </span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className=\"text-sm font-semibold\">\r\n                          {item.name}\r\n                        </span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className=\"text-sm\">{item.request_ids}</span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center space-x-4\">\r\n\r\n\r\n                          <Button\r\n                            layout=\"link\"\r\n                            size=\"icon\"\r\n                            aria-label=\"Mark as Todo\"\r\n                            onClick={() => handleUpdateBatchStatus(item.id, 'todo')}\r\n                            className=\"px-2 py-1 text-xs bg-red-100 text-red-700 rounded-full hover:bg-red-200 dark:bg-red-900 dark:text-red-300 dark:hover:bg-red-800\"\r\n                          >\r\n                            <AiOutlineDelete className=\"w-5 h-5\" aria-hidden=\"true\" />\r\n                             TODO\r\n                          </Button>\r\n\r\n                          <Button\r\n                            layout=\"link\"\r\n                            size=\"icon\"\r\n                            aria-label=\"Mark as Completed\"\r\n                            onClick={() => handleUpdateBatchStatus(item.id, 'completed')}\r\n                            className=\"px-2 py-1 text-xs bg-green-100 text-green-700 rounded-full hover:bg-green-200 dark:bg-green-900 dark:text-green-300 dark:hover:bg-green-800\"\r\n                          >\r\n                            COMPLETED\r\n                          </Button>\r\n\r\n                          <Button\r\n                            layout=\"link\"\r\n                            size=\"icon\"\r\n                            aria-label=\"Mark as Duplicate\"\r\n                            onClick={() => handleUpdateBatchStatus(item.id, 'duplicate')}\r\n                            className=\"px-2 py-1 text-xs bg-yellow-100 text-yellow-700 rounded-full hover:bg-yellow-200 dark:bg-yellow-500 dark:text-yellow-200 dark:hover:bg-yellow-700\"\r\n                          >\r\n                            DUPLICATE\r\n                          </Button>\r\n\r\n\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n\r\n            {/* Mobile View */}\r\n            <div className=\"md:hidden space-y-3\">\r\n              {batchData.length === 0 ? (\r\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\r\n                  No batches found\r\n                </div>\r\n              ) : (\r\n                batchData.map((item, index) => (\r\n                  <div\r\n                    key={item.id}\r\n                    className=\"bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:border-purple-200 dark:hover:border-purple-700 transition-colors\"\r\n                    onClick={() => handleBatchDetails(item)}\r\n                  >\r\n                    <div className=\"flex items-center p-3\">\r\n                      <div className=\"h-12 w-12 mr-3 rounded-full bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-300 flex items-center justify-center font-medium\">\r\n                        {index + 1}\r\n                      </div>\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <p className=\"font-medium dark:text-white truncate\">\r\n                            {item.full_name}\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 mt-0.5\">\r\n                          <span className=\"truncate\">Name: {item.name}</span>\r\n                        </div>\r\n                        <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 mt-0.5\">\r\n                          <span className=\"truncate\">Request IDs: {item.request_ids}</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex justify-center\">\r\n                        <BatchActionButtons batchId={item.id} />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </div>\r\n\r\n\r\n          </>\r\n        )}\r\n      </div>\r\n      {/* Create Batch Modal */}\r\n      <CreateBatchModal\r\n        isOpen={isCreateModalOpen}\r\n        onClose={handleCreateModalClose}\r\n        onBatchCreated={handleBatchCreated}\r\n      />\r\n      {/* Edit Batch Modal */}\r\n      {currentBatch && (\r\n        <EditBatchModal\r\n          isOpen={isEditModalOpen}\r\n          onClose={handleEditModalClose}\r\n          onBatchUpdated={handleBatchUpdated}\r\n          batchData={currentBatch}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Batch;\r\n","import axios from \"axios\";\r\n\r\n// let BASE_URL = \"http://35.172.211.35/api\";\r\nlet BASE_URL = \"https://rms-v2.duckdns.org/api\";\r\n\r\n\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n  console.log(\"Running in Production Mode\");\r\n  BASE_URL = \"http://35.172.211.35/api\";\r\n} else {\r\n  // BASE_URL = \"http://localhost:8000/api/v1\";\r\n  console.log(\"Running in Development Mode\");\r\n}\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    // await logErrorToBackend(error);\r\n    if (error.response && error.response.status === 401) {\r\n      localStorage.clear();\r\n      window.location.href = \"/\";\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const get = async (url, params) => {\r\n  return axiosInstance.get(url, { params }).then((res) => res.data);\r\n};\r\n\r\nexport const post = async (url, data) => {\r\n  return axiosInstance.post(url, data).then((res) => res.data);\r\n};\r\n\r\nexport const put = async (url, data) => {\r\n  return axiosInstance.put(url, data).then((res) => res.data);\r\n};\r\n\r\nexport const patch = async (url, data) => {\r\n  return axiosInstance.patch(url, data).then((res) => res.data);\r\n};\r\n\r\nexport const _delete = async (url) => {\r\n  return axiosInstance.delete(url).then((res) => res.data);\r\n};\r\n\r\nexport const downloadBlob = async (url, filename) => {\r\n  try {\r\n    const response = await axiosInstance.get(url, {\r\n      responseType: \"blob\",\r\n    });\r\n\r\n    const blob = new Blob([response.data], { type: \"application/pdf\" });\r\n    const blobUrl = window.URL.createObjectURL(blob);\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.href = blobUrl;\r\n    link.setAttribute(\"download\", filename);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove();\r\n    window.URL.revokeObjectURL(blobUrl);\r\n  } catch (err) {\r\n    console.error(\"Download failed:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const uploadFormData = async (url, formData) => {\r\n  try {\r\n    const response = await axiosInstance.post(url, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(\"File upload failed:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport default axiosInstance;\r\n","import React from 'react'\r\n\r\nfunction PageTitle({ children }) {\r\n  return (\r\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n"],"sourceRoot":""}