{"version":3,"sources":["pages/EditMiqaatForm.js","api/axios.js","components/Typography/PageTitle.js","components/Typography/SectionTitle.js"],"names":["EditMiqaatForm","id","useParams","history","useHistory","isSubmitting","setIsSubmitting","useState","formData","setFormData","miqaat_name","miqaat_date","hijri_date","miqaat_type","description","convertToHijri","gregorianDateString","gregorianDate","Date","isNaN","getTime","referenceGregorian","referenceHijri","totalDaysDifference","Math","floor","currentYear","currentMonth","currentDay","monthLengths","concat","useEffect","hijriDate","prevData","_objectSpread","async","response","get","formattedDate","toISOString","split","thaals_polled","thaals_cooked","thaals_served","prev","error","console","toast","fetchMiqaatData","handleChange","e","name","value","target","React","createElement","Fragment","PageTitle","onClick","handleBackClick","goBack","className","AiOutlineArrowLeft","onSubmit","preventDefault","submissionData","parseInt","patch","success","push","SectionTitle","Label","Input","onChange","placeholder","required","type","readOnly","disabled","Select","Textarea","rows","Button","BASE_URL","log","axiosInstance","axios","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Promise","reject","status","clear","window","location","href","url","params","then","res","data","post","put","_delete","delete","downloadBlob","filename","responseType","blob","Blob","blobUrl","URL","createObjectURL","link","document","setAttribute","body","appendChild","click","remove","revokeObjectURL","err","uploadFormData","_ref","children"],"mappings":"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","file":"static/js/12.25ffe294.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { get, patch } from '../api/axios'\r\nimport PageTitle from '../components/Typography/PageTitle'\r\nimport SectionTitle from '../components/Typography/SectionTitle'\r\nimport { Input, Label, Select, Textarea, Button } from '@windmill/react-ui'\r\nimport { toast } from 'react-hot-toast'\r\nimport {\r\n  AiOutlineArrowLeft,\r\n} from \"react-icons/ai\";\r\nconst EditMiqaatForm = () => {\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const [formData, setFormData] = useState({\r\n    miqaat_name: '',\r\n    miqaat_date: '',\r\n    hijri_date: '',\r\n    miqaat_type: 'general_miqaats',\r\n    description: '',\r\n\r\n  });\r\n\r\n  const convertToHijri = (gregorianDateString) => {\r\n    const gregorianDate = new Date(gregorianDateString);\r\n\r\n    if (isNaN(gregorianDate.getTime())) {\r\n      return \"\";\r\n    }\r\n\r\n    const referenceGregorian = new Date(2025, 2, 13);\r\n    const referenceHijri = { year: 1446, month: 9, day: 14 };\r\n\r\n    const millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n    const totalDaysDifference = Math.floor(\r\n      (gregorianDate - referenceGregorian) / millisecondsPerDay\r\n    );\r\n\r\n    const hijriYearLength = 354;\r\n\r\n    const yearDifference = Math.floor(totalDaysDifference / hijriYearLength);\r\n    const remainingDays = totalDaysDifference % hijriYearLength;\r\n\r\n    let currentYear = referenceHijri.year + yearDifference;\r\n    let currentMonth = referenceHijri.month;\r\n    let currentDay = referenceHijri.day + remainingDays;\r\n\r\n    const monthNames = [\r\n      \"Moharramul Haram\",\r\n      \"Safarul Muzaffar\",\r\n      \"Rabiul Awwal\",\r\n      \"Rabiul Akhar\",\r\n      \"Jumadil Ula\",\r\n      \"Jumadal Ukhra\",\r\n      \"Rajabal Asab\",\r\n      \"Shabanul Karim\",\r\n      \"Ramadanal Moazzam\",\r\n      \"Shawwalul Mukarram\",\r\n      \"Ziqadatil Haram\",\r\n      \"Zilhajatil Haram\",\r\n    ];\r\n\r\n    const monthLengths = [30, 29, 30, 29, 30, 29, 30, 30, 29, 30, 29, 30];\r\n\r\n    while (currentDay > monthLengths[currentMonth - 1]) {\r\n      currentDay -= monthLengths[currentMonth - 1];\r\n      currentMonth++;\r\n\r\n      if (currentMonth > 12) {\r\n        currentMonth = 1;\r\n        currentYear++;\r\n      }\r\n    }\r\n\r\n    while (currentDay < 1) {\r\n      currentMonth--;\r\n      if (currentMonth < 1) {\r\n        currentMonth = 12;\r\n        currentYear--;\r\n      }\r\n      currentDay += monthLengths[currentMonth - 1];\r\n    }\r\n\r\n    return `${currentDay} ${monthNames[currentMonth - 1]} ${currentYear}`;\r\n  };\r\n\r\n  // Update hijri_date automatically when miqaat_date changes\r\n  useEffect(() => {\r\n    if (formData.miqaat_date) {\r\n      const hijriDate = convertToHijri(formData.miqaat_date);\r\n      setFormData(prevData => ({\r\n        ...prevData,\r\n        hijri_date: hijriDate\r\n      }));\r\n    }\r\n  }, [formData.miqaat_date]);\r\n\r\n  // Fetch data on component mount\r\n  useEffect(() => {\r\n    const fetchMiqaatData = async () => {\r\n      try {\r\n        const response = await get(`/miqaat/${id}/`);\r\n        \r\n        // Convert date to proper format for date input\r\n        const formattedDate = response.miqaat_date \r\n          ? new Date(response.miqaat_date).toISOString().split('T')[0] \r\n          : '';\r\n\r\n        // Update form data with fetched data\r\n        setFormData({\r\n          miqaat_name: response.miqaat_name || '',\r\n          miqaat_date: formattedDate,\r\n          hijri_date: response.hijri_date || '',\r\n          miqaat_type: response.miqaat_type || 'general_miqaats',\r\n          description: response.description || '',\r\n          thaals_polled: response.thaals_polled || 0,\r\n          thaals_cooked: response.thaals_cooked || 0,\r\n          thaals_served: response.thaals_served || 0\r\n        });\r\n        \r\n        // If miqaat_date exists but hijri_date is empty, calculate it\r\n        if (formattedDate && !response.hijri_date) {\r\n          const hijriDate = convertToHijri(formattedDate);\r\n          setFormData(prev => ({\r\n            ...prev,\r\n            hijri_date: hijriDate\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching Miqaat data:', error);\r\n        toast.error('Failed to load Miqaat data');\r\n      }\r\n    };\r\n\r\n    fetchMiqaatData();\r\n  }, [id]);\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    // Skip updating hijri_date directly as it's now auto-calculated\r\n    if (name !== 'hijri_date') {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [name]: value\r\n      }));\r\n    }\r\n  };\r\n  const handleBackClick = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  // Form submission handler\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n    \r\n    try {\r\n      // Prepare submission data\r\n      const submissionData = {\r\n        ...formData,\r\n        // Ensure numeric fields are converted to numbers\r\n        thaals_polled: parseInt(formData.thaals_polled) || 0,\r\n        thaals_cooked: parseInt(formData.thaals_cooked) || 0,\r\n        thaals_served: parseInt(formData.thaals_served) || 0\r\n      };\r\n\r\n      // Submit the form\r\n      await patch(`/miqaat/${id}/`, submissionData);\r\n      \r\n      // Show success message\r\n      toast.success('Miqaat updated successfully');\r\n      \r\n      // Redirect based on miqaat_type\r\n      history.push(`/app/tables?miqaat_type=${formData.miqaat_type}`);\r\n    } catch (error) {\r\n      console.error('Error updating Miqaat:', error);\r\n      toast.error('Failed to update Miqaat');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <PageTitle> <button onClick={handleBackClick} className=\"mr-4\">\r\n                  <AiOutlineArrowLeft className=\"w-5 h-5 dark:text-white\" />\r\n                </button> Edit Miqaat</PageTitle>\r\n\r\n     <form onSubmit={handleSubmit}>\r\n  <SectionTitle>Miqaat Details</SectionTitle>\r\n\r\n  <div className=\"px-4 py-6 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800 grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n\r\n    {/* Miqaat Name */}\r\n    <Label>\r\n      <span>Miqaat Name</span>\r\n      <Input\r\n        className=\"mt-1\"\r\n        name=\"miqaat_name\"\r\n        value={formData.miqaat_name}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter miqaat name\"\r\n        required\r\n      />\r\n    </Label>\r\n\r\n    {/* Miqaat Date */}\r\n    <Label>\r\n      <span>Miqaat Date</span>\r\n      <Input\r\n        type=\"date\"\r\n        className=\"mt-1\"\r\n        name=\"miqaat_date\"\r\n        value={formData.miqaat_date}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n    </Label>\r\n\r\n    {/* Hijri Date */}\r\n    <Label>\r\n      <span>Hijri Date</span>\r\n      <Input\r\n        className=\"mt-1\"\r\n        name=\"hijri_date\"\r\n        value={formData.hijri_date}\r\n        readOnly\r\n        disabled\r\n        placeholder=\"Automatically calculated from Miqaat Date\"\r\n      />\r\n    </Label>\r\n\r\n    {/* Miqaat Type */}\r\n    <Label>\r\n      <span>Miqaat Type</span>\r\n      <Select\r\n        className=\"mt-1\"\r\n        name=\"miqaat_type\"\r\n        value={formData.miqaat_type}\r\n        onChange={handleChange}\r\n        required\r\n      >\r\n        <option value=\"general_miqaats\">General Miqaats</option>\r\n        <option value=\"private_events\">Private Events</option>\r\n        <option value=\"ramadan\">Ramadan</option>\r\n      </Select>\r\n    </Label>\r\n\r\n    {/* Description - Full Width */}\r\n    <div className=\"md:col-span-2\">\r\n      <Label>\r\n        <span>Description</span>\r\n        <Textarea\r\n          className=\"mt-1\"\r\n          rows=\"4\"\r\n          name=\"description\"\r\n          value={formData.description}\r\n          onChange={handleChange}\r\n          placeholder=\"Enter miqaat description\"\r\n        />\r\n      </Label>\r\n    </div>\r\n\r\n    {/* Submit Button */}\r\n    <div className=\"md:col-span-2 flex justify-center md:justify-end mt-6\">\r\n      <Button type=\"submit\" disabled={isSubmitting}>\r\n        {isSubmitting ? 'Updating...' : 'Update Miqaat'}\r\n      </Button>\r\n    </div>\r\n\r\n  </div>\r\n</form>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditMiqaatForm","import axios from \"axios\";\r\n\r\n// let BASE_URL = \"http://35.172.211.35/api\";\r\nlet BASE_URL = \"https://rms-v2.duckdns.org/api\";\r\n\r\n\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n  console.log(\"Running in Production Mode\");\r\n  BASE_URL = \"http://35.172.211.35/api\";\r\n} else {\r\n  // BASE_URL = \"http://localhost:8000/api/v1\";\r\n  console.log(\"Running in Development Mode\");\r\n}\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    // await logErrorToBackend(error);\r\n    if (error.response && error.response.status === 401) {\r\n      localStorage.clear();\r\n      window.location.href = \"/\";\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const get = async (url, params) => {\r\n  return axiosInstance.get(url, { params }).then((res) => res.data);\r\n};\r\n\r\nexport const post = async (url, data) => {\r\n  return axiosInstance.post(url, data).then((res) => res.data);\r\n};\r\n\r\nexport const put = async (url, data) => {\r\n  return axiosInstance.put(url, data).then((res) => res.data);\r\n};\r\n\r\nexport const patch = async (url, data) => {\r\n  return axiosInstance.patch(url, data).then((res) => res.data);\r\n};\r\n\r\nexport const _delete = async (url) => {\r\n  return axiosInstance.delete(url).then((res) => res.data);\r\n};\r\n\r\nexport const downloadBlob = async (url, filename) => {\r\n  try {\r\n    const response = await axiosInstance.get(url, {\r\n      responseType: \"blob\",\r\n    });\r\n\r\n    const blob = new Blob([response.data], { type: \"application/pdf\" });\r\n    const blobUrl = window.URL.createObjectURL(blob);\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.href = blobUrl;\r\n    link.setAttribute(\"download\", filename);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove();\r\n    window.URL.revokeObjectURL(blobUrl);\r\n  } catch (err) {\r\n    console.error(\"Download failed:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const uploadFormData = async (url, formData) => {\r\n  try {\r\n    const response = await axiosInstance.post(url, formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(\"File upload failed:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport default axiosInstance;\r\n","import React from 'react'\r\n\r\nfunction PageTitle({ children }) {\r\n  return (\r\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n","import React from 'react'\r\n\r\nfunction SectionTitle({ children }) {\r\n  return <h2 className=\"mb-4 text-lg font-semibold text-gray-600 dark:text-gray-300\">{children}</h2>\r\n}\r\n\r\nexport default SectionTitle\r\n"],"sourceRoot":""}